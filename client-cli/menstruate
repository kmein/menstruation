#!/usr/bin/env python3
from datetime import date
from itertools import chain
from termcolor import cprint
from typing import Any, Dict
from babel.numbers import format_currency
import argparse
import json
import requests

ENDPOINT = "http://v22017123717458308.happysrv.de"


def display_codes(codes: Dict[str, Any], pattern: str) -> None:
    for uni in codes["unis"]:
        if not pattern:
            cprint(uni["name"].upper(), attrs=["bold"])
        for mensa in uni["mensas"]:
            if not pattern or pattern.lower() in mensa["address"].lower():
                cprint(mensa["code"], "magenta", end=" ")
                cprint(mensa["address"])
        if not pattern:
            print()


def display_meal(meal: Dict[str, Any], perspective: str) -> None:
    assert perspective in ("student", "employee", "guest")
    print(format_currency(meal["price"][perspective], "EUR"), end=" ")
    cprint(meal["name"], meal["color"] or "white", end=" ")
    if meal["tags"]:
        print("({})".format(", ".join(meal["tags"])))
    else:
        print()


if __name__ == "__main__":
    parser = argparse.ArgumentParser(prog="menstruate")

    colors = parser.add_argument_group("colors")
    colors.add_argument("--green", "-g", dest="colors", action="append_const", const="green", help="Show healthy offers")
    colors.add_argument("--yellow", "-y", dest="colors", action="append_const", const="yellow", help="Show semi-healthy offers")
    colors.add_argument("--red", "-r", dest="colors", action="append_const", const="red", help="Show unhealthy offers")

    tags = parser.add_argument_group("tags")
    tags.add_argument("--vegetarian", "-v", dest="tags", action="append_const", const=["vegetarian", "vegan"], help="Show vegetarian offers (implies vegan)")
    tags.add_argument("--vegan", "-V", dest="tags", action="append_const", const=["vegan"], help="Show vegan offers")
    tags.add_argument("--organic", "-o", dest="tags", action="append_const", const=["organic"], help="Show organic offers (BIO)")
    tags.add_argument("--climate", "-c", dest="tags", action="append_const", const=["climate"], help="Show climate-friendly offers")

    price = parser.add_argument_group("price")
    price.add_argument("--category", choices=["student", "employee", "guest"], nargs="?", default="student", help="Select the price category (default student)")
    price.add_argument("--min", metavar="EUR", type=float, default=0, help="Only show offers above EUR euros")
    price.add_argument("--max", metavar="EUR", type=float, default=float("inf"), help="Only show offers below EUR euros")

    parameters = parser.add_argument_group("parameters")
    parameters.add_argument("--date", "-d", metavar="YYYY-MM-DD", default=date.today(), nargs="?", help="Show offers for a specific date (default today)")
    parameters.add_argument("--mensa", "-m", metavar="CODE", nargs="?", default=191, help="Mensa code (obtain with list-codes, default 191 = Adlershof)")

    subparsers = parser.add_subparsers(dest="list_codes")
    list_codes = subparsers.add_parser("list-codes", help="List all available mensa codes")
    list_codes.add_argument("pattern", metavar="PATTERN", nargs="?", help="Search for a specific address")

    args = parser.parse_args()

    if args.list_codes:
        json_object = json.loads(requests.get(ENDPOINT + "/codes").text)
        display_codes(json_object, args.pattern)
    else:
        # flatten multiple tags
        meal_tags = set(chain.from_iterable(args.tags or []))

        json_object = json.loads(requests.get(ENDPOINT + "/{}/{}".format(args.mensa, args.date)).text)

        group_indent_length = len(format_currency(0, "EUR"))

        for group in json_object["groups"]:
            cprint(group_indent_length * " " + " " + group["name"].upper(), attrs=["bold"])
            for meal in group["meals"]:
                if not args.colors or meal["color"] in args.colors:
                    if not meal_tags or meal_tags & set(meal["tags"]):
                        price = meal["price"][args.category]
                        if price >= args.min and price <= args.max:
                            display_meal(meal, args.category)
            print()
